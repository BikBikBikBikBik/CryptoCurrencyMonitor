<#
/*
Copyright (C) 2017 BikBikBikBikBik

This file is part of CryptoCurrencyMonitor.

CryptoCurrencyMonitor is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CryptoCurrencyMonitor is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CryptoCurrencyMonitor.  If not, see <http://www.gnu.org/licenses/>.
*/
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)\Newtonsoft.Json.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".txt" #>
<#
	var webClient = new WebClient();
	var tickerString = webClient.DownloadString("https://api.coinmarketcap.com/v1/ticker/?limit=0");
	var ticker = JArray.Parse(tickerString);
#>
using System;
using System.Collections.Generic;
using System.Linq;

namespace CryptoCurrencyMonitor.MarketData.Client {
	public static class CurrencyTypeRegistry {
		public static int GetIdFromName(String name) {
			try {
				var desiredEntry = CurrencyTypeMap.Single(kv => kv.Value.Item2.Equals(name, StringComparison.InvariantCultureIgnoreCase));

				return desiredEntry.Key;
			} catch {
				return -1;
			}
		}

		public static Tuple<String, String> GetNameAndSymbolFromId(int id) {
			if (!CurrencyTypeMap.ContainsKey(id)) {
				return null;
			}

			return CurrencyTypeMap[id];
		}

		public static readonly IReadOnlyDictionary<int, Tuple<String, String>> CurrencyTypeMap = new Dictionary<int, Tuple<String, String>> {
<#
	foreach (var coin in ticker.OrderBy(c => c["symbol"].Value<String>())) {
		var coinName = coin["name"].Value<String>();
		var coinSymbol = coin["symbol"].Value<String>();
#>
			{ <#= (coinName + coinSymbol).GetHashCode() #>, new Tuple<String, String>("<#= coinSymbol #>", "<#= coinName #>") },
<#
	}
#>
		};
	}
}